{"version":3,"sources":["Home.js","Country.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","useState","allCountry","setAllCountry","allCountryCopy","setAllCountryCopy","useEffect","fetchAllCountry","a","fetch","json","data","className","uiState","id","type","placeholder","onChange","searchInput","document","getElementById","filteredCountriesByName","filter","country","name","toLowerCase","includes","value","defaultValue","selectEl","filteredCountriesByRegion","region","disabled","map","to","key","alpha3Code","src","flag","alt","population","capital","Country","fetchCountry","match","url","setState","getBorderFullName","borders","state","border","fetchBorder","prevState","this","handleClick","forceUpdate","class","aria-hidden","width","nativeName","subregion","topLevelDomain","currencies","languages","language","length","React","Component","App","uiMode","setUiMode","darkModeToggleText","setDarkModeToggleText","toggleUiMode","style","backgroundColor","color","onClick","fontSize","fontWeight","path","exact","component","render","Boolean","window","location","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff4c3473.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n} from \"react-router-dom\";\r\n\r\nfunction Home(props) {\r\n    const [allCountry, setAllCountry] = useState([]);\r\n    const [allCountryCopy, setAllCountryCopy] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchAllCountry();\r\n    }, [])\r\n\r\n    const fetchAllCountry = async () => {\r\n        const data = await (await fetch('https://restcountries.eu/rest/v2/all')).json();\r\n        setAllCountry(data);\r\n        setAllCountryCopy(data);\r\n    }\r\n\r\n    const onChangeSeachCountry = () => {\r\n        const searchInput = document.getElementById('search-counrty');\r\n        const filteredCountriesByName = allCountryCopy.filter((country) => {\r\n            if (country.name.toLowerCase().includes(searchInput.value.toLowerCase())) {\r\n                return country;\r\n            };\r\n        })\r\n        setAllCountry(filteredCountriesByName);\r\n    }\r\n\r\n    const onChangeSelectRegion = () => {\r\n        const selectEl = document.getElementById('region');\r\n        const filteredCountriesByRegion = allCountryCopy.filter((country) => {\r\n            if (country.region.toLowerCase().includes(selectEl.value)) {\r\n                return country;\r\n            }\r\n        })\r\n        setAllCountry(filteredCountriesByRegion);\r\n    }\r\n\r\n    return <div className={props.uiState === 'light' ? 'light-mode-bg padding-x' : 'dark-mode-bg padding-x'}>\r\n        <div className='search-container'>\r\n            <input className={props.uiState === 'light' ? 'light-mode-el' : 'dark-mode-el'} id=\"search-counrty\" type=\"text\" placeholder='&#xF002; &nbsp; &nbsp; Search for a country' onChange={onChangeSeachCountry} />\r\n            <select className={props.uiState === 'light' ? 'light-mode-el' : 'dark-mode-el'} defaultValue={'DEFAULT'} name=\"region\" id=\"region\" onChange={onChangeSelectRegion}>\r\n                <option disabled value=\"DEFAULT\">Filter By Region</option>\r\n                <option value=\"africa\">Africa</option>\r\n                <option value=\"america\">America</option>\r\n                <option value=\"asia\">Asia</option>\r\n                <option value=\"europe\">Europe</option>\r\n                <option value=\"oceania\">Oceania</option>\r\n                <option value=\"\">All</option>\r\n            </select>\r\n        </div>\r\n        <div className=\"countries-container\">\r\n            {allCountry.map((country) => {\r\n                return <Link className=\"country-link\" to={`/${country.name}`} key={country.alpha3Code}>\r\n                    <div className={props.uiState === 'light' ? 'light-mode-el country' : 'dark-mode-el country'} >\r\n                        <img src={country.flag} alt=\"image\" />\r\n                        <p className=\"country-name padding-left\">{country.name}</p>\r\n                        <p className=\"padding-left margin-0\"><span>Population:</span> {country.population}</p>\r\n                        <p className=\"padding-left margin-0\"><span>Region:</span> {country.region}</p>\r\n                        <p className=\"padding-left margin-0\"><span>Capital:</span> {country.capital}</p>\r\n                    </div>\r\n                </Link>\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n} from \"react-router-dom\";\r\n\r\nclass Country extends React.Component {\r\n    constructor(...props) {\r\n        super();\r\n        this.state = { data: {}, borders: [], value: 0 }\r\n    }\r\n\r\n    fetchCountry = async () => {\r\n        const data = await (await fetch(`https://restcountries.eu/rest/v2/name${this.props.match.url}?fullText=true`)).json();\r\n        this.setState({ data: data[0] })\r\n    }\r\n\r\n    getBorderFullName = async () => {\r\n        this.setState({ borders: [] })\r\n        this.state.data.borders.map(async (border) => {\r\n            const fetchBorder = await (await fetch(`https://restcountries.eu/rest/v2/alpha/${border}`)).json();\r\n            this.setState((prevState) => ({\r\n                borders: [...(prevState.borders || []), fetchBorder.name]\r\n            }))\r\n        })\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.fetchCountry()\r\n\r\n        this.getBorderFullName()\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    async componentWillReceiveProps() {\r\n        await this.setState({ data: {} });\r\n        await this.fetchCountry()\r\n        this.getBorderFullName()\r\n    }\r\n\r\n    render() {\r\n        return <div className={this.props.uiState === 'light' ? 'light-mode-bg padding-x country-page' : 'dark-mode-bg padding-x country-page'} >\r\n            <Link to={\"/\"}><button className={this.props.uiState === 'light' ? 'light-mode-el light-mode-button' : 'dark-mode-el dark-mode-button'}><i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i> Back</button></Link>\r\n            <div className=\"main-container\">\r\n                <div className=\"flex-container\">\r\n                    <img className=\"country-flag\" src={this.state.data.flag} alt=\"\" width=\"400px\" />\r\n                </div>\r\n                <div className={this.props.uiState === 'light' ? 'light-mode-bg flex-container' : 'dark-mode-bg flex-container'}>\r\n                    <h2>{this.state.data.name}</h2>\r\n                    <div className=\"country-details-container\">\r\n                        <div>\r\n                            <p><span>Native Name:</span>  {this.state.data.nativeName}</p>\r\n                            <p><span>Population:</span>  {this.state.data.population}</p>\r\n                            <p><span>Region:</span>  {this.state.data.region}</p>\r\n                            <p><span>Sub Region:</span>  {this.state.data.subregion}</p>\r\n                            <p><span>Capital:</span>  {this.state.data.capital}</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><span>Top Level Domain:</span>  {this.state.data.topLevelDomain}</p>\r\n                            <p><span>Currencies:</span> {this.state.data.currencies && this.state.data.currencies[0].name}</p>\r\n                            <p><span>Languages:</span> {this.state.data.languages &&\r\n                                this.state.data.languages.map((language) => {\r\n                                    if (language.name === this.state.data.languages[this.state.data.languages.length - 1].name) {\r\n                                        return language.name;\r\n                                    }\r\n                                    return (language.name + ', ');\r\n                                })\r\n                            }\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"border-container\">\r\n                        <p>\r\n                            <span>Border Countries: </span>\r\n                            {this.state.data.borders &&\r\n                                this.state.borders.map((border) => {\r\n                                    return <Link className={this.props.uiState === 'light' ? 'light-mode-el border light-mode-button' : 'dark-mode-el border dark-mode-button'} key={border} to={`/${border}`}>{border}\r\n                                    </Link>\r\n                                })\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div >\r\n    }\r\n}\r\n\r\nexport default Country;","import React, { useState } from 'react';\nimport './App.css';\n\nimport {\n  HashRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport Home from './Home';\nimport Country from './Country';\n\nfunction App() {\n\n  const [uiMode, setUiMode] = useState('light');\n  const [darkModeToggleText, setDarkModeToggleText] = useState('Dark Mode')\n  const toggleUiMode = async () => {\n    await setUiMode((uiMode === 'light' ? 'dark' : 'light'));\n    setDarkModeToggleText((darkModeToggleText === 'Dark Mode' ? 'Light Mode' : 'Dark Mode'));\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"padding-x navbar\" style={{ backgroundColor: (uiMode === 'light' ? '#fff' : '#2B3743') }}>\n        <h1\n          style={{ color: (uiMode === 'light' ? '#000' : '#fff') }}>\n          Where In The World\n        </h1>\n        <div\n          style={{ color: (uiMode === 'light' ? '#000' : '#fff') }}\n          className=\"ui-mode-toggle\" onClick={toggleUiMode}>\n          {darkModeToggleText === 'Dark Mode' ? <i className=\"fa fa-moon-o  \" style={{ color: 'black', fontSize: '1rem', fontWeight: '600' }}></i> : <i className=\"fa fa-sun-o  \" style={{ color: 'white', fontSize: '1rem', fontWeight: '600' }}></i>} {darkModeToggleText}\n\n        </div>\n      </div>\n\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={() => <Home uiState={uiMode} />} />\n          <Route path=\"/:id\" exact render={(props) => <Country {...props} uiState={uiMode} />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}